#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int isKeyword(char *buffer) {
    static const char *keywords[] = {
        "auto", "break", "case", "char", "const", "continue", "default", "do", "double",
        "else", "enum", "extern", "float", "for", "goto", "if", "int", "long", "register",
        "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef",
        "union", "unsigned", "void", "volatile", "while"
    };
    for (int i = 0; i < 32; ++i)
        if (strcmp(keywords[i], buffer) == 0) return 1;
    return 0;
}

int isNumber(char *buffer) {
    int dotCount = 0;
    for (int i = 0; buffer[i] != '\0'; i++) {
        if (buffer[i] == '.') {
            dotCount++;
        } else if (!isdigit(buffer[i])) {
            return 0;  // Not a number if it contains non-digit and non-dot characters
        }
    }
    return dotCount <= 1;  // Valid number if it has zero or exactly one dot
}

int isOperator(char ch) {
    char operators[] = "+-*/%=";
    return strchr(operators, ch) != NULL;
}

int main() {
    char ch, buffer[15];
    FILE *fp = fopen("inp.txt", "r");
    if (!fp) { printf("Error opening file\n"); exit(0); }

    int j = 0, in_comment = 0;
    while ((ch = fgetc(fp)) != EOF) {
        if (ch == '/' && !in_comment) {
            char next_ch = fgetc(fp);
            if (next_ch == '/') { in_comment = 1; continue; }
            else ungetc(next_ch, fp);
        }

        if (in_comment) {
            if (ch == '*' && (ch = fgetc(fp)) == '/') in_comment = 0;
            continue;
        }

        if (isalnum(ch) || ch == '.') buffer[j++] = ch;  // Include '.' in the buffer
        else if ((ch == ' ' || ch == '\n' || isOperator(ch)) && j) {
            buffer[j] = '\0'; j = 0;

            if (isKeyword(buffer)) {
                printf("%s is keyword\n", buffer);
            } else if (isNumber(buffer)) {
                printf("%s is a number\n", buffer);
            } else {
                // Treat "main" and "printf" as identifiers
                printf("%s is an identifier\n", buffer);
            }
        }

        // Handle operators separately for correct formatting
        if (isOperator(ch)) {
            printf("%c is operator\n", ch);
        }
    }
    fclose(fp);
    return 0;
}
